// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  password String
  role     Role      @default(USER)
  listings Listing[]
  bookings Booking[]
  accounts Account[]
  sessions Session[]
  propertiesManaged Listing[] @relation("AgentProperties")
  reviews  Review[]  @relation("UserReviews")
  favorites Favorite[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id          String    @id @default(uuid())
  title       String
  description String
  price       Float
  location    String
  images      String[]
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  bookings    Booking[]
  reviews     Review[]
  createdAt   DateTime  @default(now())
  agent       User?     @relation("AgentProperties", fields: [agentId], references: [id])
  agentId     String?
  favorites   Favorite[]
  views       Int       @default(0)
}

model Booking {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  renterId  String
  renter    User     @relation("UserReviews", fields: [renterId], references: [id])
  createdAt DateTime @default(now())
}

model Favorite {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  listing    Listing  @relation(fields: [listingId], references: [id])
  listingId  String
  createdAt  DateTime @default(now())

  @@unique([userId, listingId])
}

enum Role {
  USER
  AGENT
  ADMIN
  LANDLORD
}
